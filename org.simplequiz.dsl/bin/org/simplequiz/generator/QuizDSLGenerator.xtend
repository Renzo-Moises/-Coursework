/*
 * generated by Xtext 2.38.0
 */
package org.simplequiz.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.simplequiz.quizDSL.Model
import org.simplequiz.quizDSL.Quiz
import org.simplequiz.quizDSL.Question
import org.simplequiz.quizDSL.Choice

import org.eclipse.xtext.generator.AbstractGenerator


/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 
 * The QuizDSLGenerator class is responsible for generating XML from the DSL representation of a quiz.
 * It takes a parsed Quiz model and converts it into an XML format suitable for usage in Moodle or other platforms.
 * This class is used during the code generation process in an Xtext-based DSL project to transform quiz data
 * into an XML file that can be imported into Moodle or similar systems.
 */
 

class QuizDSLGenerator extends AbstractGenerator {

    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        System.out.println("Generating file... WORKING FINE")
        System.out.println("Resource content: " + resource.contents)
        
        // Ensure resource is not empty and contains a Model object
        if (resource.contents.isEmpty) return
        
        // Get the first element, which should be of type Model
        val firstElement = resource.contents.head
        if (firstElement instanceof Model) {
            val model = firstElement as Model
            
			System.out.println("Model class: " + model.class.name)
			
			// Debug: print all method names from Model class
			for (method : model.class.declaredMethods) {
			    System.out.println("Method: " + method.name)
			}

            System.out.println("Model contains quizzes: " + model.quizzes.size)  // Check how many quizzes the model contains
            
            // Iterate over all quizzes in the model and generate XML for each
            model.quizzes.forEach [ Quiz quiz |
                val xmlContent = generateXML(quiz)
                
                // Define the output file name and path for each quiz
				System.out.println("Generating XML for quiz: " + quiz.name)
				val fileName = 'generated-quiz-' + quiz.name + '.xml'
				fsa.generateFile(fileName, xmlContent)
				System.out.println("File generated: " + fileName)
            ]
        } else {
            // Handle the case where the resource doesn't contain a Model object
            System.out.println("Error: The resource does not contain a Model object")
        }
    }
    
    

    // Function to generate XML content from the Quiz model
    def generateXML(Quiz quiz) {
        val xmlBuilder = new StringBuilder()
        xmlBuilder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<quiz>\n")
        
		// Add randomizeOrder if it exists (New Code)
		if (quiz.randomizeOrder) { // Check if randomizeOrder is true
		    xmlBuilder.append("<randomizeorder>true</randomizeorder>\n") // Add the randomizeorder tag
		}

        // Loop through each question in the quiz and generate XML for them
        quiz.questions.forEach [ Question question |
            xmlBuilder.append("<question type=\"multichoice\">\n")
            xmlBuilder.append("<name><text>").append(question.text).append("</text></name>\n")
            xmlBuilder.append("<questiontext format=\"html\"><text>").append(question.text).append("</text></questiontext>\n")
            
            // Loop through each choice in the question and generate XML for the answer choices
            question.choices.forEach [ Choice choice |
                xmlBuilder.append("<answer fraction=\"")
                if (choice.correctness == "correct") {
                    xmlBuilder.append("100")
                } else {
                    xmlBuilder.append("0")
                }
                xmlBuilder.append("\"><text>").append(choice.text).append("</text></answer>\n")
            ]
            xmlBuilder.append("</question>\n")
        ]
        
        xmlBuilder.append("</quiz>")
        return xmlBuilder.toString
    }
}

