/**
 * generated by Xtext 2.38.0
 */
package org.simplequiz.generator;

import java.lang.reflect.Method;
import java.util.Objects;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.simplequiz.quizDSL.Choice;
import org.simplequiz.quizDSL.Model;
import org.simplequiz.quizDSL.Question;
import org.simplequiz.quizDSL.Quiz;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 * 
 * The QuizDSLGenerator class is responsible for generating XML from the DSL representation of a quiz.
 * It takes a parsed Quiz model and converts it into an XML format suitable for usage in Moodle or other platforms.
 * This class is used during the code generation process in an Xtext-based DSL project to transform quiz data
 * into an XML file that can be imported into Moodle or similar systems.
 */
@SuppressWarnings("all")
public class QuizDSLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    System.out.println("Generating file... WORKING FINE");
    EList<EObject> _contents = resource.getContents();
    String _plus = ("Resource content: " + _contents);
    System.out.println(_plus);
    boolean _isEmpty = resource.getContents().isEmpty();
    if (_isEmpty) {
      return;
    }
    final EObject firstElement = IterableExtensions.<EObject>head(resource.getContents());
    if ((firstElement instanceof Model)) {
      final Model model = ((Model) firstElement);
      String _name = model.getClass().getName();
      String _plus_1 = ("Model class: " + _name);
      System.out.println(_plus_1);
      Method[] _declaredMethods = model.getClass().getDeclaredMethods();
      for (final Method method : _declaredMethods) {
        String _name_1 = method.getName();
        String _plus_2 = ("Method: " + _name_1);
        System.out.println(_plus_2);
      }
      int _size = model.getQuizzes().size();
      String _plus_3 = ("Model contains quizzes: " + Integer.valueOf(_size));
      System.out.println(_plus_3);
      final Consumer<Quiz> _function = (Quiz quiz) -> {
        final String xmlContent = this.generateXML(quiz);
        String _name_2 = quiz.getName();
        String _plus_4 = ("Generating XML for quiz: " + _name_2);
        System.out.println(_plus_4);
        String _name_3 = quiz.getName();
        String _plus_5 = ("generated-quiz-" + _name_3);
        final String fileName = (_plus_5 + ".xml");
        fsa.generateFile(fileName, xmlContent);
        System.out.println(("File generated: " + fileName));
      };
      model.getQuizzes().forEach(_function);
    } else {
      System.out.println("Error: The resource does not contain a Model object");
    }
  }

  public String generateXML(final Quiz quiz) {
    final StringBuilder xmlBuilder = new StringBuilder();
    xmlBuilder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<quiz>\n");
    boolean _isRandomizeOrder = quiz.isRandomizeOrder();
    if (_isRandomizeOrder) {
      xmlBuilder.append("<randomizeorder>true</randomizeorder>\n");
    }
    final Consumer<Question> _function = (Question question) -> {
      xmlBuilder.append("<question type=\"multichoice\">\n");
      xmlBuilder.append("<name><text>").append(question.getText()).append("</text></name>\n");
      xmlBuilder.append("<questiontext format=\"html\"><text>").append(question.getText()).append("</text></questiontext>\n");
      final Consumer<Choice> _function_1 = (Choice choice) -> {
        xmlBuilder.append("<answer fraction=\"");
        String _correctness = choice.getCorrectness();
        boolean _equals = Objects.equals(_correctness, "correct");
        if (_equals) {
          xmlBuilder.append("100");
        } else {
          xmlBuilder.append("0");
        }
        xmlBuilder.append("\"><text>").append(choice.getText()).append("</text></answer>\n");
      };
      question.getChoices().forEach(_function_1);
      xmlBuilder.append("</question>\n");
    };
    quiz.getQuestions().forEach(_function);
    xmlBuilder.append("</quiz>");
    return xmlBuilder.toString();
  }
}
