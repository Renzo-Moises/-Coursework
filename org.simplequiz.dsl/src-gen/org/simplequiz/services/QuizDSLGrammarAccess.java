/*
 * generated by Xtext 2.38.0
 */
package org.simplequiz.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QuizDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simplequiz.QuizDSL.Model");
		private final Assignment cQuizzesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQuizzesQuizParserRuleCall_0 = (RuleCall)cQuizzesAssignment.eContents().get(0);
		
		//Model:
		//    quizzes+=Quiz*;
		@Override public ParserRule getRule() { return rule; }
		
		//quizzes+=Quiz*
		public Assignment getQuizzesAssignment() { return cQuizzesAssignment; }
		
		//Quiz
		public RuleCall getQuizzesQuizParserRuleCall_0() { return cQuizzesQuizParserRuleCall_0; }
	}
	public class QuizElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simplequiz.QuizDSL.Quiz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuizKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRandomizeOrderAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cRandomizeOrderRandomizeOrderKeyword_3_0 = (Keyword)cRandomizeOrderAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cBooleanLiteralParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cQuestionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cQuestionsQuestionParserRuleCall_6_0 = (RuleCall)cQuestionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Quiz:
		//    'quiz' name=STRING '{'
		//        randomizeOrder?='randomizeOrder' '=' booleanLiteral?
		//        questions+=Question*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'quiz' name=STRING '{'
		//    randomizeOrder?='randomizeOrder' '=' booleanLiteral?
		//    questions+=Question*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'quiz'
		public Keyword getQuizKeyword_0() { return cQuizKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//randomizeOrder?='randomizeOrder'
		public Assignment getRandomizeOrderAssignment_3() { return cRandomizeOrderAssignment_3; }
		
		//'randomizeOrder'
		public Keyword getRandomizeOrderRandomizeOrderKeyword_3_0() { return cRandomizeOrderRandomizeOrderKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//booleanLiteral?
		public RuleCall getBooleanLiteralParserRuleCall_5() { return cBooleanLiteralParserRuleCall_5; }
		
		//questions+=Question*
		public Assignment getQuestionsAssignment_6() { return cQuestionsAssignment_6; }
		
		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_6_0() { return cQuestionsQuestionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simplequiz.QuizDSL.booleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//booleanLiteral:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simplequiz.QuizDSL.Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Assignment cCalculatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cCalculatedCalculatedKeyword_2_0 = (Keyword)cCalculatedAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Assignment cChoicesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChoicesChoiceParserRuleCall_5_0 = (RuleCall)cChoicesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Question:
		//    'question' text=STRING
		//    calculated?='calculated'? // new optional flag
		//    '{'
		//        expression=Expression?     // optional expression
		//        choices+=Choice*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'question' text=STRING
		//calculated?='calculated'? // new optional flag
		//'{'
		//    expression=Expression?     // optional expression
		//    choices+=Choice*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'question'
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
		
		//calculated?='calculated'?
		public Assignment getCalculatedAssignment_2() { return cCalculatedAssignment_2; }
		
		//'calculated'
		public Keyword getCalculatedCalculatedKeyword_2_0() { return cCalculatedCalculatedKeyword_2_0; }
		
		//// new optional flag
		//   '{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//expression=Expression?
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//// optional expression
		//   choices+=Choice*
		public Assignment getChoicesAssignment_5() { return cChoicesAssignment_5; }
		
		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_5_0() { return cChoicesChoiceParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simplequiz.QuizDSL.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Expression:
		//    'expression' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'expression' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'expression'
		public Keyword getExpressionKeyword_0() { return cExpressionKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simplequiz.QuizDSL.Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Assignment cCorrectnessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cCorrectnessAlternatives_2_0 = (Alternatives)cCorrectnessAssignment_2.eContents().get(0);
		private final Keyword cCorrectnessCorrectKeyword_2_0_0 = (Keyword)cCorrectnessAlternatives_2_0.eContents().get(0);
		private final Keyword cCorrectnessIncorrectKeyword_2_0_1 = (Keyword)cCorrectnessAlternatives_2_0.eContents().get(1);
		
		//Choice:
		//    'choice' text=STRING correctness=('correct' | 'incorrect');
		@Override public ParserRule getRule() { return rule; }
		
		//'choice' text=STRING correctness=('correct' | 'incorrect')
		public Group getGroup() { return cGroup; }
		
		//'choice'
		public Keyword getChoiceKeyword_0() { return cChoiceKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
		
		//correctness=('correct' | 'incorrect')
		public Assignment getCorrectnessAssignment_2() { return cCorrectnessAssignment_2; }
		
		//('correct' | 'incorrect')
		public Alternatives getCorrectnessAlternatives_2_0() { return cCorrectnessAlternatives_2_0; }
		
		//'correct'
		public Keyword getCorrectnessCorrectKeyword_2_0_0() { return cCorrectnessCorrectKeyword_2_0_0; }
		
		//'incorrect'
		public Keyword getCorrectnessIncorrectKeyword_2_0_1() { return cCorrectnessIncorrectKeyword_2_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final QuizElements pQuiz;
	private final BooleanLiteralElements pBooleanLiteral;
	private final QuestionElements pQuestion;
	private final ExpressionElements pExpression;
	private final ChoiceElements pChoice;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QuizDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pQuiz = new QuizElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pQuestion = new QuestionElements();
		this.pExpression = new ExpressionElements();
		this.pChoice = new ChoiceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.simplequiz.QuizDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    quizzes+=Quiz*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Quiz:
	//    'quiz' name=STRING '{'
	//        randomizeOrder?='randomizeOrder' '=' booleanLiteral?
	//        questions+=Question*
	//    '}';
	public QuizElements getQuizAccess() {
		return pQuiz;
	}
	
	public ParserRule getQuizRule() {
		return getQuizAccess().getRule();
	}
	
	//booleanLiteral:
	//    'true' | 'false';
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//Question:
	//    'question' text=STRING
	//    calculated?='calculated'? // new optional flag
	//    '{'
	//        expression=Expression?     // optional expression
	//        choices+=Choice*
	//    '}';
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//Expression:
	//    'expression' value=STRING;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Choice:
	//    'choice' text=STRING correctness=('correct' | 'incorrect');
	public ChoiceElements getChoiceAccess() {
		return pChoice;
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
