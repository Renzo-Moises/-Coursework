/*
 * generated by Xtext 2.38.0
 */
package org.simplequiz.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.simplequiz.quizDSL.Choice;
import org.simplequiz.quizDSL.Expression;
import org.simplequiz.quizDSL.Model;
import org.simplequiz.quizDSL.Question;
import org.simplequiz.quizDSL.Quiz;
import org.simplequiz.quizDSL.QuizDSLPackage;
import org.simplequiz.services.QuizDSLGrammarAccess;

@SuppressWarnings("all")
public class QuizDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QuizDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QuizDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QuizDSLPackage.CHOICE:
				sequence_Choice(context, (Choice) semanticObject); 
				return; 
			case QuizDSLPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case QuizDSLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case QuizDSLPackage.QUESTION:
				sequence_Question(context, (Question) semanticObject); 
				return; 
			case QuizDSLPackage.QUIZ:
				sequence_Quiz(context, (Quiz) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Choice returns Choice
	 *
	 * Constraint:
	 *     (text=STRING (correctness='correct' | correctness='incorrect'))
	 * </pre>
	 */
	protected void sequence_Choice(ISerializationContext context, Choice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QuizDSLPackage.Literals.EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QuizDSLPackage.Literals.EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     quizzes+=Quiz+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Question returns Question
	 *
	 * Constraint:
	 *     (text=STRING calculated?='calculated'? expression=Expression? choices+=Choice*)
	 * </pre>
	 */
	protected void sequence_Question(ISerializationContext context, Question semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Quiz returns Quiz
	 *
	 * Constraint:
	 *     (name=STRING randomizeOrder?='randomizeOrder' questions+=Question*)
	 * </pre>
	 */
	protected void sequence_Quiz(ISerializationContext context, Quiz semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
