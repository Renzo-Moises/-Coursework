/*
 * generated by Xtext 2.38.0
 */
package org.simplequiz.validation;


import org.eclipse.xtext.validation.Check;

import org.simplequiz.quizDSL.Question;

import org.simplequiz.quizDSL.QuizDSLPackage;

//import org.eclipse.xtext.validation.Check;
import org.simplequiz.quizDSL.Quiz;
import java.util.HashSet;


/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class QuizDSLValidator extends AbstractQuizDSLValidator {
	
//	public static final String INVALID_NAME = "invalidName";
	
    @Check
    public void checkMinimumChoices(Question question) {
        // Check if the question has fewer than 2 answer choices
        if (question.getChoices().size() < 2) {
            // If so, trigger a warning that each question must have at least two choices
            warning("Each question must have at least two answer choices.", 
                    QuizDSLPackage.Literals.QUESTION__CHOICES);
        }
    }
    
    @Check
    public void checkCalculatedAnswer(Question question) {
        if (question.isCalculated() && question.getExpression() != null) {
            String expr = question.getExpression().getValue();

            try {
                int result = evaluateSimpleExpression(expr);

                boolean hasCorrectAnswer = question.getChoices().stream()
                    .anyMatch(choice -> choice.getCorrectness().equals("correct")&& choice.getText().equals(String.valueOf(result)));

                if (!hasCorrectAnswer) {
                    error("Correct answer must match the result of the expression: " + result,
                          QuizDSLPackage.Literals.QUESTION__CHOICES);
                }

            } catch (Exception e) {
                error("Invalid expression. Unable to evaluate: " + expr + ". Error: " + e.getMessage(),
                        QuizDSLPackage.Literals.EXPRESSION__VALUE);
              }
        }
    }
      
    
    @Check
    public void checkDuplicateQuestions(Quiz quiz) {
        if (quiz.getQuestions() == null || quiz.getQuestions().isEmpty()) return;

        HashSet<String> seenTexts = new HashSet<>();
        for (Question question : quiz.getQuestions()) {
            if (question.getText() == null) continue;

//            String text = question.getText().trim();
            //to chatch duplicate questions with different spacing or lower or upper case
            String normalizedText = question.getText().trim().toLowerCase().replaceAll("\\s+", " ");


            if (seenTexts.contains(normalizedText)) {
            	warning("Duplicate question detected: \"" + normalizedText + "\"",
            		    question,
            		    QuizDSLPackage.Literals.QUESTION__TEXT);
            } else {
                seenTexts.add(normalizedText);
            }
        }
    }
    
    @Check
    public void checkValidChoice(Question question) {
        boolean hasCorrectAnswer = question.getChoices().stream()
                .anyMatch(choice -> choice.getCorrectness().equals("correct"));
        if (!hasCorrectAnswer) {
            error("Each question must have at least one correct choice.",
                  QuizDSLPackage.Literals.QUESTION__CHOICES);
        }
    }
    
    private int evaluateSimpleExpression(String expr) throws Exception {
        // Remove whitespace around the expression
        expr = expr.replaceAll("\\s+", "");
        String[] tokens;

        // Check for addition operator (+)
        if (expr.contains("+")) {
            tokens = expr.split("\\+");
            if (tokens.length != 2) throw new Exception("Invalid expression format: expected two operands for '+'");
            return Integer.parseInt(tokens[0]) + Integer.parseInt(tokens[1]);
        } 
        // Check for subtraction operator (-)
        else if (expr.contains("-")) {
            tokens = expr.split("-");
            if (tokens.length != 2) throw new Exception("Invalid expression format: expected two operands for '-'");
            return Integer.parseInt(tokens[0]) - Integer.parseInt(tokens[1]);
        }
        // Check for multiplication operator (*)
        else if (expr.contains("*")) {
            tokens = expr.split("\\*");
            if (tokens.length != 2) throw new Exception("Invalid expression format: expected two operands for '*'");
            return Integer.parseInt(tokens[0]) * Integer.parseInt(tokens[1]);
        }
        // Check for division operator (/)
        else if (expr.contains("/")) {
            tokens = expr.split("/");
            if (tokens.length != 2) throw new Exception("Invalid expression format: expected two operands for '/'");
            return Integer.parseInt(tokens[0]) / Integer.parseInt(tokens[1]);
        } 
        // If no operator is found, throw an exception
        else {
            throw new Exception("Unsupported expression format.");
        }
    }   
	
}
