/*
 * generated by Xtext 2.38.0
 */
package org.simplequiz.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.simplequiz.ide.contentassist.antlr.internal.InternalQuizDSLParser;
import org.simplequiz.services.QuizDSLGrammarAccess;

public class QuizDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(QuizDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, QuizDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBooleanLiteralAccess().getAlternatives(), "rule__BooleanLiteral__Alternatives");
			builder.put(grammarAccess.getChoiceAccess().getCorrectnessAlternatives_2_0(), "rule__Choice__CorrectnessAlternatives_2_0");
			builder.put(grammarAccess.getQuizAccess().getGroup(), "rule__Quiz__Group__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup(), "rule__Question__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getChoiceAccess().getGroup(), "rule__Choice__Group__0");
			builder.put(grammarAccess.getModelAccess().getQuizzesAssignment(), "rule__Model__QuizzesAssignment");
			builder.put(grammarAccess.getQuizAccess().getNameAssignment_1(), "rule__Quiz__NameAssignment_1");
			builder.put(grammarAccess.getQuizAccess().getRandomizeOrderAssignment_3(), "rule__Quiz__RandomizeOrderAssignment_3");
			builder.put(grammarAccess.getQuizAccess().getQuestionsAssignment_6(), "rule__Quiz__QuestionsAssignment_6");
			builder.put(grammarAccess.getQuestionAccess().getTextAssignment_1(), "rule__Question__TextAssignment_1");
			builder.put(grammarAccess.getQuestionAccess().getCalculatedAssignment_2(), "rule__Question__CalculatedAssignment_2");
			builder.put(grammarAccess.getQuestionAccess().getExpressionAssignment_4(), "rule__Question__ExpressionAssignment_4");
			builder.put(grammarAccess.getQuestionAccess().getChoicesAssignment_5(), "rule__Question__ChoicesAssignment_5");
			builder.put(grammarAccess.getExpressionAccess().getValueAssignment_1(), "rule__Expression__ValueAssignment_1");
			builder.put(grammarAccess.getChoiceAccess().getTextAssignment_1(), "rule__Choice__TextAssignment_1");
			builder.put(grammarAccess.getChoiceAccess().getCorrectnessAssignment_2(), "rule__Choice__CorrectnessAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private QuizDSLGrammarAccess grammarAccess;

	@Override
	protected InternalQuizDSLParser createParser() {
		InternalQuizDSLParser result = new InternalQuizDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public QuizDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(QuizDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
