/*
 * generated by Xtext 2.38.0
 */
package org.simplequiz.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.simplequiz.quizDSL.Model

@ExtendWith(InjectionExtension)
@InjectWith(QuizDSLInjectorProvider)
class QuizDSLParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
@Test
def void loadModel() {
    val result = parseHelper.parse('''
        quiz "My Test Quiz" {
            randomizeOrder=true

            question "What is 2 + 2?" calculated {
                expression "2 + 2"
                choice "3" incorrect
                choice "4" correct
            }
        }
    ''')

    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

    // Check if we have exactly 1 quiz
    Assertions.assertEquals(1, result.quizzes.size)

    // Check if the quiz name matches the input
    Assertions.assertEquals("My Test Quiz", result.quizzes.get(0).name)

    // Check if the quiz has the correct randomizeOrder flag
    Assertions.assertTrue(result.quizzes.get(0).randomizeOrder)

    // Check if we have exactly 1 question in the quiz
    val question = result.quizzes.get(0).questions.get(0)
    Assertions.assertEquals("What is 2 + 2?", question.text)

    // Check if the question is marked as "calculated"
    Assertions.assertTrue(question.calculated)

    // Check if the question has an expression
    Assertions.assertEquals("2 + 2", question.expression?.value)

    // Check if the question has 2 choices
    Assertions.assertEquals(2, question.choices.size)

    // Check if the first choice is incorrect
    Assertions.assertEquals("3", question.choices.get(0).text)
    Assertions.assertEquals("incorrect", question.choices.get(0).correctness)

    // Check if the second choice is correct
    Assertions.assertEquals("4", question.choices.get(1).text)
    Assertions.assertEquals("correct", question.choices.get(1).correctness)
}



@Test
def void testInvalidSyntax() {
	val result = parseHelper.parse('''
		quiz "Broken Quiz" {
			question "No expression" calculated {
				choice "A" correct
			}
		}
	''')

	Assertions.assertFalse(result.eResource.errors.isEmpty,
		"Expected errors, but found none")
}

@Test
def void testMultipleQuestions() {
	val result = parseHelper.parse('''
		quiz "Multi Quiz" {
			randomizeOrder

			question "Q1?" calculated {
				expression "1 + 1"
				choice "1" incorrect
				choice "2" correct
			}

			question "Q2?" calculated {
				expression "2 + 2"
				choice "3" incorrect
				choice "4" correct
			}
		}
	''')

	val quiz = result.quizzes.head
	Assertions.assertEquals(2, quiz.questions.size)
	Assertions.assertEquals("Q2?", quiz.questions.get(1).text)
}

@Test
def void testGenerateXMLReturnsContent() {
    val input = '''
        quiz "Simple Quiz" {
            randomizeOrder true
            question "What is 1 + 1?" calculated {
                expression "1 + 1"
                choice "1" incorrect
                choice "2" correct
            }
        }
    '''

    val model = parseHelper.parse(input)
    Assertions.assertNotNull(model, "Parsed model is null")
    Assertions.assertTrue(model.quizzes.size > 0, "No quizzes found")

    val quiz = model.quizzes.head
    val generator = new org.simplequiz.generator.QuizDSLGenerator

    val xmlOutput = generator.generateXML(quiz)
    Assertions.assertNotNull(xmlOutput, "Generated XML is null")
    Assertions.assertFalse(xmlOutput.trim.isEmpty, "Generated XML is empty")

    // Optional: verify basic structure
    Assertions.assertTrue(xmlOutput.contains("<quiz>"), "Missing <quiz> tag")
    Assertions.assertTrue(xmlOutput.contains("<question"), "Missing <question> tag")
    Assertions.assertTrue(xmlOutput.contains("randomizeorder"), "Missing <randomizeorder> tag")
}



}
