/**
 * generated by Xtext 2.38.0
 */
package org.simplequiz.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.simplequiz.generator.QuizDSLGenerator;
import org.simplequiz.quizDSL.Expression;
import org.simplequiz.quizDSL.Model;
import org.simplequiz.quizDSL.Question;
import org.simplequiz.quizDSL.Quiz;

@ExtendWith(InjectionExtension.class)
@InjectWith(QuizDSLInjectorProvider.class)
@SuppressWarnings("all")
public class QuizDSLParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;

  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("quiz \"My Test Quiz\" {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("randomizeOrder=true");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("question \"What is 2 + 2?\" calculated {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("expression \"2 + 2\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("choice \"3\" incorrect");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("choice \"4\" correct");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      Assertions.assertEquals(1, result.getQuizzes().size());
      Assertions.assertEquals("My Test Quiz", result.getQuizzes().get(0).getName());
      Assertions.assertTrue(result.getQuizzes().get(0).isRandomizeOrder());
      final Question question = result.getQuizzes().get(0).getQuestions().get(0);
      Assertions.assertEquals("What is 2 + 2?", question.getText());
      Assertions.assertTrue(question.isCalculated());
      Expression _expression = question.getExpression();
      String _value = null;
      if (_expression!=null) {
        _value=_expression.getValue();
      }
      Assertions.assertEquals("2 + 2", _value);
      Assertions.assertEquals(2, question.getChoices().size());
      Assertions.assertEquals("3", question.getChoices().get(0).getText());
      Assertions.assertEquals("incorrect", question.getChoices().get(0).getCorrectness());
      Assertions.assertEquals("4", question.getChoices().get(1).getText());
      Assertions.assertEquals("correct", question.getChoices().get(1).getCorrectness());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testInvalidSyntax() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("quiz \"Broken Quiz\" {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("question \"No expression\" calculated {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("choice \"A\" correct");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertFalse(result.eResource().getErrors().isEmpty(), 
        "Expected errors, but found none");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testMultipleQuestions() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("quiz \"Multi Quiz\" {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("randomizeOrder");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("question \"Q1?\" calculated {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("expression \"1 + 1\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("choice \"1\" incorrect");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("choice \"2\" correct");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("question \"Q2?\" calculated {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("expression \"2 + 2\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("choice \"3\" incorrect");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("choice \"4\" correct");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      final Quiz quiz = IterableExtensions.<Quiz>head(result.getQuizzes());
      Assertions.assertEquals(2, quiz.getQuestions().size());
      Assertions.assertEquals("Q2?", quiz.getQuestions().get(1).getText());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testGenerateXMLReturnsContent() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("quiz \"Simple Quiz\" {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("randomizeOrder true");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("question \"What is 1 + 1?\" calculated {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("expression \"1 + 1\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("choice \"1\" incorrect");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("choice \"2\" correct");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final String input = _builder.toString();
      final Model model = this.parseHelper.parse(input);
      Assertions.assertNotNull(model, "Parsed model is null");
      int _size = model.getQuizzes().size();
      boolean _greaterThan = (_size > 0);
      Assertions.assertTrue(_greaterThan, "No quizzes found");
      final Quiz quiz = IterableExtensions.<Quiz>head(model.getQuizzes());
      final QuizDSLGenerator generator = new QuizDSLGenerator();
      final String xmlOutput = generator.generateXML(quiz);
      Assertions.assertNotNull(xmlOutput, "Generated XML is null");
      Assertions.assertFalse(xmlOutput.trim().isEmpty(), "Generated XML is empty");
      Assertions.assertTrue(xmlOutput.contains("<quiz>"), "Missing <quiz> tag");
      Assertions.assertTrue(xmlOutput.contains("<question"), "Missing <question> tag");
      Assertions.assertTrue(xmlOutput.contains("randomizeorder"), "Missing <randomizeorder> tag");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
